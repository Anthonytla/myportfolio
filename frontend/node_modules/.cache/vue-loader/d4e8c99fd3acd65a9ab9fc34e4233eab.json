{"remainingRequest":"C:\\Users\\thanh\\OneDrive\\Documents\\group-865773\\myportfolio\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\thanh\\OneDrive\\Documents\\group-865773\\myportfolio\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\thanh\\OneDrive\\Documents\\group-865773\\myportfolio\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\thanh\\OneDrive\\Documents\\group-865773\\myportfolio\\frontend\\src\\components\\Register.vue?vue&type=template&id=7bf3755a&scoped=true&","dependencies":[{"path":"C:\\Users\\thanh\\OneDrive\\Documents\\group-865773\\myportfolio\\frontend\\src\\components\\Register.vue","mtime":1620732289940},{"path":"C:\\Users\\thanh\\OneDrive\\Documents\\group-865773\\myportfolio\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\thanh\\OneDrive\\Documents\\group-865773\\myportfolio\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\thanh\\OneDrive\\Documents\\group-865773\\myportfolio\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\thanh\\OneDrive\\Documents\\group-865773\\myportfolio\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}